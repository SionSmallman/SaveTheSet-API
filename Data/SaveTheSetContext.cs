using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace sts_net.Data;

// DB context class
// Autogenerated by EF
public partial class SaveTheSetContext : DbContext
{
    public SaveTheSetContext()
    {
    }

    public SaveTheSetContext(DbContextOptions<SaveTheSetContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Artist> Artists { get; set; }

    public virtual DbSet<Playlist> Savedplaylists { get; set; }

    public virtual DbSet<Spotifytoken> Spotifytokens { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseNpgsql("Name=ConnectionStrings:Db");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Artist>(entity =>
        {
            entity.HasKey(e => e.SpotifyArtistId).HasName("artists_pkey");

            entity.ToTable("artists");

            entity.Property(e => e.SpotifyArtistId)
                .HasMaxLength(255)
                .HasColumnName("spotifyartistid");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("imageurl");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Playlist>(entity =>
        {
            entity.HasKey(e => e.Playlistid).HasName("savedplaylists_pkey");

            entity.ToTable("savedplaylists");

            entity.Property(e => e.Playlistid)
                .UseIdentityAlwaysColumn()
                .HasColumnName("playlistid");
            entity.Property(e => e.Artistname)
                .HasMaxLength(255)
                .HasColumnName("artistname");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Date)
                .HasMaxLength(255)
                .HasColumnName("date");
            entity.Property(e => e.Setlistfmurl)
                .HasMaxLength(255)
                .HasColumnName("setlistfmurl");
            entity.Property(e => e.Spotifyartistid)
                .HasMaxLength(255)
                .HasColumnName("spotifyartistid");
            entity.Property(e => e.Spotifyplaylistlink)
                .HasMaxLength(255)
                .HasColumnName("spotifyplaylistlink");
            entity.Property(e => e.Spotifyuserid)
                .HasMaxLength(255)
                .HasColumnName("spotifyuserid");
            entity.Property(e => e.Venue)
                .HasMaxLength(255)
                .HasColumnName("venue");

            entity.HasOne(d => d.Spotifyartist).WithMany(p => p.Savedplaylists)
                .HasForeignKey(d => d.Spotifyartistid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_artists");

            entity.HasOne(d => d.Spotifyuser).WithMany(p => p.Savedplaylists)
                .HasForeignKey(d => d.Spotifyuserid)
                .HasConstraintName("fk_users");
        });

        modelBuilder.Entity<Spotifytoken>(entity =>
        {
            entity.HasKey(e => e.Spotifyuserid).HasName("spotifytokens_pkey");

            entity.ToTable("spotifytokens");

            entity.Property(e => e.Spotifyuserid)
                .HasMaxLength(255)
                .HasColumnName("spotifyuserid");
            entity.Property(e => e.Spotifyrefreshtoken)
                .HasMaxLength(255)
                .HasColumnName("spotifyrefreshtoken");

            entity.HasOne(d => d.Spotifyuser).WithOne(p => p.Spotifytoken)
                .HasForeignKey<Spotifytoken>(d => d.Spotifyuserid)
                .HasConstraintName("fk_users_spotifyuserid");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Spotifyuserid).HasName("users_pkey");

            entity.ToTable("users");

            entity.Property(e => e.Spotifyuserid)
                .HasMaxLength(255)
                .HasColumnName("spotifyuserid");
            entity.Property(e => e.Createdat)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("createdat");
            entity.Property(e => e.Lastlogin)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("lastlogin");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
